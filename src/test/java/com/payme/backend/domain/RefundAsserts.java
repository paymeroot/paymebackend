package com.payme.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RefundAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAllPropertiesEquals(Refund expected, Refund actual) {
        assertRefundAutoGeneratedPropertiesEquals(expected, actual);
        assertRefundAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAllUpdatablePropertiesEquals(Refund expected, Refund actual) {
        assertRefundUpdatableFieldsEquals(expected, actual);
        assertRefundUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundAutoGeneratedPropertiesEquals(Refund expected, Refund actual) {
        assertThat(expected)
            .as("Verify Refund auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundUpdatableFieldsEquals(Refund expected, Refund actual) {
        assertThat(expected)
            .as("Verify Refund relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getTransactionRef()).as("check transactionRef").isEqualTo(actual.getTransactionRef()))
            .satisfies(e -> assertThat(e.getRefundDate()).as("check refundDate").isEqualTo(actual.getRefundDate()))
            .satisfies(e -> assertThat(e.getRefundStatus()).as("check refundStatus").isEqualTo(actual.getRefundStatus()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRefundUpdatableRelationshipsEquals(Refund expected, Refund actual) {
        assertThat(expected)
            .as("Verify Refund relationships")
            .satisfies(e -> assertThat(e.getTransaction()).as("check transaction").isEqualTo(actual.getTransaction()))
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
