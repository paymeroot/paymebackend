package com.payme.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllPropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllUpdatablePropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionUpdatableFieldsEquals(expected, actual);
        assertTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAutoGeneratedPropertiesEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableFieldsEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getSenderNumber()).as("check senderNumber").isEqualTo(actual.getSenderNumber()))
            .satisfies(e -> assertThat(e.getSenderWallet()).as("check senderWallet").isEqualTo(actual.getSenderWallet()))
            .satisfies(e -> assertThat(e.getReceiverNumber()).as("check receiverNumber").isEqualTo(actual.getReceiverNumber()))
            .satisfies(e -> assertThat(e.getReceiverWallet()).as("check receiverWallet").isEqualTo(actual.getReceiverWallet()))
            .satisfies(e -> assertThat(e.getTransactionStatus()).as("check transactionStatus").isEqualTo(actual.getTransactionStatus()))
            .satisfies(e -> assertThat(e.getPayInStatus()).as("check payInStatus").isEqualTo(actual.getPayInStatus()))
            .satisfies(e -> assertThat(e.getPayOutStatus()).as("check payOutStatus").isEqualTo(actual.getPayOutStatus()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getObject()).as("check object").isEqualTo(actual.getObject()))
            .satisfies(e -> assertThat(e.getPayInFailureReason()).as("check payInFailureReason").isEqualTo(actual.getPayInFailureReason()))
            .satisfies(
                e -> assertThat(e.getPayOutFailureReason()).as("check payOutFailureReason").isEqualTo(actual.getPayOutFailureReason())
            )
            .satisfies(e -> assertThat(e.getSenderCountryName()).as("check senderCountryName").isEqualTo(actual.getSenderCountryName()))
            .satisfies(
                e -> assertThat(e.getReceiverCountryName()).as("check receiverCountryName").isEqualTo(actual.getReceiverCountryName())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableRelationshipsEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()));
    }
}
