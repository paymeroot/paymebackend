package com.payme.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OperatorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllPropertiesEquals(Operator expected, Operator actual) {
        assertOperatorAutoGeneratedPropertiesEquals(expected, actual);
        assertOperatorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllUpdatablePropertiesEquals(Operator expected, Operator actual) {
        assertOperatorUpdatableFieldsEquals(expected, actual);
        assertOperatorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAutoGeneratedPropertiesEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableFieldsEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator relevant properties")
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCountryCode()).as("check countryCode").isEqualTo(actual.getCountryCode()))
            .satisfies(e -> assertThat(e.getLogoUrl()).as("check logoUrl").isEqualTo(actual.getLogoUrl()))
            .satisfies(e -> assertThat(e.getTaxPayIn()).as("check taxPayIn").isEqualTo(actual.getTaxPayIn()))
            .satisfies(e -> assertThat(e.getTaxPayOut()).as("check taxPayOut").isEqualTo(actual.getTaxPayOut()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableRelationshipsEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator relationships")
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()));
    }
}
